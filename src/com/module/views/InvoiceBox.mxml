<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" minWidth="1000" minHeight="550"
		  xmlns:s="library://ns.adobe.com/flex/spark" paddingLeft="10" paddingRight="10" initialize="init()"
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.module.events.DataListEvent;
			import com.module.events.ItemsTransEvent;
			import com.module.events.UserEvent;
			import com.module.renderer.InvoiceRenderer;
			import com.variables.AccessVars;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.printing.FlexPrintJob;
			import mx.printing.FlexPrintJobScaleType;
			
			import spark.components.Application;
			import spark.events.GridEvent;
			import spark.events.GridItemEditorEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			private var _totalQty:int = 0;
			public var _type:int = 0; 
			public var _data:Object;
			private var _fromUpdate:Boolean = false;
			public var theOwner:Object;
			public var _salesNo:String = "000";
			
			public function set salesNo(val:String):void{
				_salesNo = val;
			}
			public function get salesNo():String{
				return _salesNo;
			}
			
			private function init():void{
				var log:ItemsTransEvent = new ItemsTransEvent(ItemsTransEvent.SEARCH_PRODUCT,{searchstr:"",condition:"",sBox:this})
				CairngormEventDispatcher.getInstance().dispatchEvent(log);
				
				
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				/* var log3:ItemsTransEvent = new ItemsTransEvent(ItemsTransEvent.GET_SALES_NUMBER,{qBox:this})
				CairngormEventDispatcher.getInstance().dispatchEvent(log3); */
				dfDate.selectedDate = new Date(); 
				
				if (AccessVars.instance().branches == null){
					var log2:DataListEvent = new DataListEvent(DataListEvent.GET_BRANCH_LIST2,{pBox:this})
					CairngormEventDispatcher.getInstance().dispatchEvent(log2);
				}
				
				if (AccessVars.instance().customers == null){
					var log3:UserEvent = new UserEvent(UserEvent.GET_CUSTOMER_LIST,{qBox:this})
					CairngormEventDispatcher.getInstance().dispatchEvent(log3);
				}
				
				updateDataList();
			
				//genReqNoCode();
			}
			
			public function updateDataList():void{
				if(AccessVars.instance().branches)
					cmbBranch.dataProvider = AccessVars.instance().branches;
				if(AccessVars.instance().customers)
					cmbCustomer.dataProvider = AccessVars.instance().customers;
			}
			
			public function genReqNoCode():void{
				//var yr:String = String(dfDate.selectedDate.getFullYear());
				if (txtInvoiceNo)
					txtInvoiceNo.text = _salesNo;
			}
			
			public function setDataProvider(arr:ArrayCollection,type:int):void{
				if (type == 0){
					cmbProd.dataProvider = arr;
					cmbProd.labelFunction = mycmbProdLabelFunction;
				}else if (type == 1){
					cmbBranch.dataProvider = arr;
					cmbBranch.labelFunction = mycmbBraLabelFunction;
					cmbBranch.selectedIndex = 0;
					//genReqNoCode();
				}else if (type == 3){
					dg.dataProvider = arr;
					//dg.validateDisplayList();
					numItems.text = "0";
					var vat:Number = 0;			
					var _subTot:Number = 0;		
					_totalQty = 0;
					for each (var item:Object in arr){						
						_subTot += Number(item.total);
						vat += Number(Number(item.total)*0.12);
						_totalQty+=Number(item.qty);
						/*for each (var items:Object in cmbProd.dataProvider as ArrayCollection){
							if (items.prodID == item.sqd_prodID){
								items.stockCnt= Number(items.stockCnt)-Number(item.qty);
								(cmbProd.dataProvider as ArrayCollection).itemUpdated(items);
								(cmbProd.dataProvider as ArrayCollection).refresh();
								break;
							}
						}*/
						
					}
					txtSubtot.text = numFmttr.format(_subTot);
					txtVat.text = numFmttr.format(_data.sq_vat);
					//txtVat.text = roundDec(_subTot*0.12).toFixed(2);
					txtGT.text = numFmttr.format(_subTot+vat);
					
					numItems.text = String(_totalQty);
				}else if (type == 4){
					cmbCustomer.dataProvider = AccessVars.instance().customers = arr;
				}
			}
			
			private var _arrCol:ArrayCollection;
			public function set dataCollection(arrCol:ArrayCollection):void{
				_arrCol = arrCol
				
				if (dgSearch.numElements > 0){
					dgSearch.removeAllElements();
				}
				
				if (arrCol.length > 0){
					var itemUser:InvoiceRenderer;
					for each (var obj:Object in arrCol){
						itemUser = new InvoiceRenderer()
						itemUser.data = obj;
						itemUser.theBox = this
						dgSearch.addElement(itemUser);
					}
				}
			}
			
			public function setSelectedBranch(bID:String):void{
				for each (var item:Object in cmbBranch.dataProvider as ArrayCollection){
					trace(item.branchID," == ",bID)
					if (item.branchID == bID){
						cmbBranch.selectedItem = item;
						break;
					}	
				}
			}
			public function setSelectedCustomer(cID:String):void{
				for each (var item:Object in cmbCustomer.dataProvider as ArrayCollection){
					trace(item.custID," == ",cID)
					if (item.custID == cID){
						cmbCustomer.selectedItem = item;
						break;
					}	
				}
			}
			
			public function removeItemHandler(obj:Object):void{
				txtSubtot.text = numFmttr.format(Number(txtSubtot.text.replace(/\b,\b/g,""))- obj.total);
				txtVat.text = numFmttr.format(Number(txtSubtot.text.replace(/\b,\b/g,""))*0.12);
				txtGT.text = numFmttr.format(Number(txtSubtot.text.replace(/\b,\b/g,""))+Number(txtVat.text.replace(/\b,\b/g,"")));
				_totalQty = Number(Number(numItems.text) - obj.qty);
				var item:Object;
				
				//revert stock count
				for each (item in cmbProd.dataProvider as ArrayCollection){
					if (item.prodID == obj.prodDBID){
						item.stockCnt= Number(item.stockCnt)+Number(obj.qty);
						(cmbProd.dataProvider as ArrayCollection).itemUpdated(item);
						(cmbProd.dataProvider as ArrayCollection).refresh();
						txtQty.value = 0;
						txtSub.text = "0.00";
						break;
					}
				}
				
				numItems.text = String(_totalQty);
				var num:int=1;
				for each(item in dg.dataProvider as ArrayCollection){
					item.num =num;
					num++;
				}
			}
			
			private function mycmbProdLabelFunction(item:Object):String{
				return (item)?item.pCode +" - "+item.modelNo:"";
			}
			private function mycmbBraLabelFunction(item:Object):String{
				return (item)?item.bCode+" - "+item.bLocation:"";
			}
			
			protected function cmbProdchangeHandler(event:IndexChangeEvent):void
			{
				if (cmbProd.selectedItem == null) return;
				var obj:Object = cmbProd.selectedItem;
				//txtPrice.text = obj.srPrice;
				//txtStock.text =  obj.stockCnt;
				txtQty.maximum = Number(obj.stockCnt);
				if (txtQty.value !=0){
					txtQtychangeHandler(null);
				}
			}
			
			protected function txtQtychangeHandler(event:Event):void
			{
				if (txtQty.value == 0 || cmbProd.selectedItem == null) return;
				
				
				txtSub.text = numFmttr.format(Number(cmbProd.selectedItem.srPrice)*int(txtQty.value));
				btnAdd.setFocus();
				/* if ()
				btnAdd.addEventListener(KeyboardEvent.KEY_UP,btnAdd_keyUpHandler); */
			}
			
			private function roundDec(numIn:Number, decimalPlaces:int = 2):Number {
				var nExp:int = Math.pow(10,decimalPlaces) ; 
				var nRetVal:Number = Math.round(numIn * nExp) / nExp
				return nRetVal;
			}		
			
			protected function btnAddclickHandler(event:MouseEvent):void
			{	
				if (cmbProd.selectedItem == null || txtQty.value == 0) return;
				var arrCol:ArrayCollection;
				var items:Object;
				if (dg.dataProvider == null)
					arrCol = new ArrayCollection();
				else
					arrCol = dg.dataProvider as ArrayCollection;
				
				var obj:Object = cmbProd.selectedItem;
				
				if (arrCol.length > 0){
					var sameItem:Object
					for each (items in arrCol){
						if (items.prodDBID == obj.prodID || items.sqd_prodID == obj.prodID){
							sameItem = items;
							break;
						}
					}
					
					if (sameItem){
						sameItem.qty=Number(sameItem.qty)+ txtQty.value;
						sameItem.total = sameItem.price * sameItem.qty;
						arrCol.itemUpdated(sameItem);
					}else
						arrCol.addItem({num:arrCol.length+1,prodDBID:obj.prodID,prodID:obj.pCode,modelNo:obj.modelNo,prodDesc:obj.desc,qty:txtQty.value,price:obj.srPrice,vat:txtVat.text.replace(/\b,\b/g,""),total:txtSub.text.replace(/\b,\b/g,"")});
				}else
					arrCol.addItem({num:arrCol.length+1,prodDBID:obj.prodID,prodID:obj.pCode,modelNo:obj.modelNo,prodDesc:obj.desc,qty:txtQty.value,price:obj.srPrice,vat:txtVat.text.replace(/\b,\b/g,""),total:txtSub.text.replace(/\b,\b/g,"")});
				
				cmbProd.selectedItem.stockCnt -=txtQty.value;
				cmbProd.dataProvider.itemUpdated(cmbProd.selectedItem);
				//arrCol.addItem({num:arrCol.length+1,prodID:obj.prodID,pCode:obj.pCode,modelNo:obj.modelNo,prodDesc:obj.desc,qty:txtQty.value,price:obj.srPrice,vat:txtVat.text.replace(/\b,\b/g,""),total:txtSub.text.replace(/\b,\b/g,"")});
				dg.dataProvider = arrCol;
				
				txtSubtot.text = numFmttr.format(Number(txtSub.text.replace(/\b,\b/g,""))+Number(txtSubtot.text.replace(/\b,\b/g,"")));
				txtVat.text = numFmttr.format(Number(txtSubtot.text.replace(/\b,\b/g,""))*0.12);
				txtGT.text = numFmttr.format(Number(txtSubtot.text.replace(/\b,\b/g,""))+Number(txtVat.text.replace(/\b,\b/g,"")));
				_totalQty =0;
				for each (items in arrCol){
					_totalQty += Number(items.qty);
				}
				numItems.text = String(_totalQty);
				cmbProd.selectedIndex = -1;
				cmbProd.textInput.text = "";
				txtQty.value = 0;
				//txtPrice.text = 
				txtSub.text = "0.00";
				txtQtychangeHandler(null);
				//txtStock.text = "0";
				cmbProd.setFocus();
			}
			
			protected function CheckOutclickHandler(event:MouseEvent):void
			{
				if (dg.dataProviderLength == 0){
					Alert.show("Item List is Empty","Submit Invoice Error");
					return;
				}
				if (txtInvoiceNo.text == ""){
					Alert.show("Invoice No. is Empty","Submit Invoice Error");
					return;
				}
				if (cmbBranch.selectedIndex == -1){
					Alert.show("No Branch Selected","Submit Invoice Error");
					return;
				}
				if (cmbCustomer.selectedIndex == -1){
					Alert.show("No Custoemr Selected","Submit Invoice Error");
					return;
				}
				
				/*
				$sq_quoteNo = $_REQUEST['sq_quoteNo'];
				$sq_branchID = $_REQUEST['sq_branchID'];
				$sq_custID = $_REQUEST['sq_custID'];
				$preparedBy = $_REQUEST['preparedBy'];
				$approvedBy = $_REQUEST['approvedBy'];
				$dateTrans = $_REQUEST['dateTrans'];
				$totalAmt = $_REQUEST['totalAmt']; 
				$vat = $_REQUEST['vat']; 
				$sqDetails = $_REQUEST['sqDetails']; 
				$sqID = $_REQUEST['sqID']; 
				*/
				
				var obj:Object = {}
				obj.sq_quoteNo = txtInvoiceNo.text;
				obj.sq_branchID = cmbBranch.selectedItem.branchID;
				obj.sq_custID = cmbCustomer.selectedItem.custID;
				obj.preparedBy = txtPrepBy.text;
				obj.approvedBy = txtAppBy.text;
				obj.dateTrans = setDateFormat(dfDate.selectedDate);
				obj.totalAmt = txtGT.text.replace(/\b,\b/g,"");
				obj.vat = txtVat.text.replace(/\b,\b/g,"");
				obj.salesQuoteID = _data?_data.sqID:"";
				var strItem:Array = new Array();
				for each (var item:Object in dg.dataProvider){
					//strItem.push(item.prodDBID+"|"+item.qty+"|"+item.total+"|"+item.sqdID);
					strItem.push(item.prodID+"|"+item.qty+"|"+item.price+"|"+item.total);
				}
				obj.sqDetails = strItem.join("||");
				obj.pBox = this;
				trace("obj.sqDetails",obj.sqDetails);
				var log2:ItemsTransEvent;
				log2 = new ItemsTransEvent(ItemsTransEvent.ADD_SALES,obj)
				CairngormEventDispatcher.getInstance().dispatchEvent(log2);
				/*if (_type==0){
					log2 = new ItemsTransEvent(ItemsTransEvent.ADD_QUOTE,obj)
					CairngormEventDispatcher.getInstance().dispatchEvent(log2);
				}else if (_type==1){
					obj.sqID = _data.sqID;
					obj.pBox = this;
					_fromUpdate = true;
					log2 = new ItemsTransEvent(ItemsTransEvent.EDIT_QUOTE,obj)
					CairngormEventDispatcher.getInstance().dispatchEvent(log2);
				}*/
				
				//printPrevPO()
			}
			
			public function setDateFormat(d:Date):String{
				var strDate:String="";
				//strDate = String(d.month+1)+"/"+d.date+"/"+d.fullYear;
				var mon:String = (d.month+1)<10?"0"+String(d.month+1):String(d.month+1);
				var dat:String = (d.date)<10?"0"+String(d.date):String(d.date);
				strDate = d.fullYear+"-"+mon+"-"+dat;
				return strDate;
			}
			
			protected function printPrevPO():void
			{
				var _printBox:PrintPrevBox = new PrintPrevBox();
				_printBox.boxType = this;
				_printBox.orderTypeID = 2;
				_printBox.width = AccessVars.instance().mainApp.width-5;
				_printBox.height = AccessVars.instance().mainApp.height-5;
				PopUpManager.addPopUp(_printBox,this,true);
			}
			
			public function clearFields(event:MouseEvent):void{
				
				if (_fromUpdate){
					_fromUpdate = false;
					
					(theOwner as InvoiceRenderer).data = _data;
					(theOwner as InvoiceRenderer).creationCompleteHandler(null);
					return;
				}
				txtAppBy.text = "";
				txtPrepBy.text = "";
				txtInvoiceNo.text = "";
				cmbCustomer.selectedIndex = -1;
				cmbBranch.selectedIndex = 0;
				cmbProd.selectedIndex = -1;
				cmbProd.textInput.text = "";				
				txtQty.textDisplay.text = "0";
				//txtPrice.text = "0.00";
				txtSub.text = "0.00";
				txtSubtot.text = "0.00";
				txtGT.text = "0.00";
				txtVat.text = "0.00";
				numItems.text = "0";
				dg.dataProvider = null;
				
				
				dfDate.selectedDate = new Date(); 
			}
			
			public function updateCurrentInvoice():void{
				btnCheckOut.visible = btnCheckOut.includeInLayout = false;
				btnNew.label = "Clear Invoice";
				btnEdit.visible = btnEdit.includeInLayout = false;
				btnView.visible = btnView.includeInLayout = true;
				var PO_renderer:InvoiceRenderer;
				for (var i:int=dgSearch.numElements-1; i >= 0; i-- ){
					PO_renderer = (dgSearch.getElementAt(i) as InvoiceRenderer);
					if (PO_renderer.data == _data){
						dgSearch.removeElementAt(i);
						break;							
					}
				}
				mainCont.enabled = false;
			}
			
			
			protected function btnAdd_keyUpHandler(event:KeyboardEvent):void
			{
				if(event.keyCode == Keyboard.ENTER)
					(event.target as Button).dispatchEvent(new MouseEvent(MouseEvent.CLICK));
			}
			
			
			protected function dg_gridDoubleClickHandler(event:GridEvent):void
			{
				if (event.column.columnIndex == 2){
					event.grid.dataGrid.startItemEditorSession(event.rowIndex, event.columnIndex);
				}
			}
			
			/*protected function dg_gridItemEditorSessionSave(event:GridItemEditorEvent):void
			{
				var item:Object = event.column.grid.dataGrid.selectedItem;
				item.total = Number(item.qty * item.price);
				dg.dataProvider.itemUpdated(item);*/
			private var prevQty:int = 1;
			protected function dg_gridItemEditorSessionStartHandler(event:GridItemEditorEvent):void
			{
				var item:Object = event.column.grid.dataGrid.selectedItem;
				prevQty = item.qty;
			}
			
			protected function dg_gridItemEditorSessionSave(event:GridItemEditorEvent):void
			{
				var item:Object = event.column.grid.dataGrid.selectedItem;
				if (item.qty <= 0){
					item.qty = prevQty;
					dg.dataProvider.itemUpdated(item);
					event.preventDefault();
					return;
				}
				var prodItem:Object;
				var hasErr:Boolean = false;
				
				for each (prodItem in cmbProd.dataProvider as ArrayCollection){
					if (prodItem.prodID == item.prodDBID){
						var maxStock:int = int(prodItem.stockCnt)+prevQty;
						//trace(item.qty," > ",maxStock, " prevQty: ",prevQty, "stock:",prodItem.stockCnt);
						if (item.qty > maxStock){
							item.qty = prevQty;
							dg.dataProvider.itemUpdated(item);
							event.preventDefault();
							hasErr = true;
							break;
						}else
							prodItem.stockCnt += prevQty - item.qty;
						(cmbProd.dataProvider as ArrayCollection).itemUpdated(prodItem);
						(cmbProd.dataProvider as ArrayCollection).refresh();
						txtQty.value = 0;
						txtSub.text = "0.00";
						break;
					}
				}
				
				if (hasErr){
					Alert.show("Value is greater than Available Stock.\n Max Stock:"+maxStock,"Error");
					return;
				}
				
				item.total = Number(item.qty * item.price);
				dg.dataProvider.itemUpdated(item);
				
				_totalQty = 0;				
				var subTot:Number = 0;
				for each (var items:Object in dg.dataProvider){
					subTot += Number(items.total)
					_totalQty += Number(items.qty);
				}
				numItems.text = String(_totalQty);
				txtSubtot.text = numFmttr.format(subTot);
				updateTotal();
			}
			
			private function updateTotal(editVat:Boolean =true):void{
				if (txtVat.text.indexOf(".")==-1)
					txtVat.text +=".00";
				
				txtSubtot.text = numFmttr.format(Number(txtSub.text.replace(/\b,\b/g,""))+Number(txtSubtot.text.replace(/\b,\b/g,"")));
				if(editVat)
					txtVat.text = numFmttr.format(Number(txtSubtot.text.replace(/\b,\b/g,""))*0.12);
				txtGT.text = numFmttr.format(Number(txtSubtot.text.replace(/\b,\b/g,""))+Number(txtVat.text.replace(/\b,\b/g,"")));
			}
			
			
			protected function txtVat_keyUpHandler(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.ENTER){
					txtGT.setFocus();
				}
			}
			
			protected function SearchClickHandler(event:MouseEvent):void
			{
				var log:ItemsTransEvent = new ItemsTransEvent(ItemsTransEvent.SEARCH_QUOTE,{searchstr:txtSearchStr.text,condition:"",qBox:this})
				CairngormEventDispatcher.getInstance().dispatchEvent(log);
				btnCheckOut.visible = btnCheckOut.includeInLayout = false;
				btnEdit.visible = btnEdit.includeInLayout = false;
				mainCont.enabled = false;
			}
			
			protected function btnNewclickHandler(event:MouseEvent):void
			{
				
				if (dg.dataProvider != null){
					Alert.show("Are you sure to create a new Invoice?","Invoice not empty",Alert.YES|Alert.NO,null,newSalesHandler,null,Alert.NO);
				}else{
					_type = 0;
					mainCont.enabled = true;
					btnNew.label = "New Invoice";
					btnCheckOut.label = "Submit Invoice";
					btnCheckOut.visible = btnCheckOut.includeInLayout = true;
					btnEdit.visible = btnEdit.includeInLayout = false;
					btnView.visible = btnView.includeInLayout = false;
					clearFields(null);
					/* var log3:ItemsTransEvent = new ItemsTransEvent(ItemsTransEvent.GET_SALES_NUMBER,{qBox:this})
					CairngormEventDispatcher.getInstance().dispatchEvent(log3); */
				}
			}
			
			private function newSalesHandler(event:CloseEvent):void{
				if (event.detail == Alert.YES){
					_type = 0;
					mainCont.enabled = true;
					btnNew.label = "New Invoice";
					btnCheckOut.label = "Submit Invoice";
					btnCheckOut.visible = btnCheckOut.includeInLayout = true;
					btnEdit.visible = btnEdit.includeInLayout = false;
					btnView.visible = btnView.includeInLayout = false;
					clearFields(null);
					/* var log3:ItemsTransEvent = new ItemsTransEvent(ItemsTransEvent.GET_SALES_NUMBER,{qBox:this})
					CairngormEventDispatcher.getInstance().dispatchEvent(log3); */
				}
			}
			
			protected function editClickHandler(event:MouseEvent):void
			{
				_type = 1;
				btnCheckOut.label = "Submit Invoice";
				btnCheckOut.visible = btnCheckOut.includeInLayout = true;
				btnView.visible = btnView.includeInLayout = true;
				mainCont.enabled = true;
			}
			
			protected function cmbBranchchangeHandler(event:Event):void
			{
				//genReqNoCode();
			}
			
			protected function cmbCuschangeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			private function formatAmtTotal(item:Object, column:GridColumn):String{
				return numFmttr.format(item.total);
			}
			private function formatAmtPrice(item:Object, column:GridColumn):String{
				return numFmttr.format(item.price);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:NumberFormatter id="numFmttr" precision="2" useThousandsSeparator="true"  />
	</fx:Declarations>
	<!--<s:Label text="Sales Quote" fontWeight="bold" fontSize="18" fontStyle="italic"/>  minWidth="300" maxWidth="350"-->
	<s:VGroup id="searchProd" width="25%" height="100%" minWidth="300" maxWidth="350" paddingBottom="5" paddingTop="5">
		<s:BorderContainer width="100%" height="100%" cornerRadius="10" borderStyle="inset">
			<s:layout>
				<s:VerticalLayout paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5"/>
			</s:layout>
			<s:borderStroke> 
				<mx:SolidColorStroke 
					color="{AccessVars.instance().borderStrokeColor}" 
					weight="2"/> 
			</s:borderStroke> 
			<s:HGroup width="100%" horizontalAlign="left" verticalAlign="middle" height="30" paddingRight="5">
				<s:Label text="Search: "/>
				<s:TextInput prompt="[Quote. No/Customer]" id="txtSearchStr" enter="SearchClickHandler(null)" width="90%"/>
				<s:Button label="Search" click="SearchClickHandler(event)"/>				
			</s:HGroup>
			<s:HGroup width="100%" fontSize="14" horizontalAlign="center" fontWeight="bold" gap="2">
				<s:Label text="Quote No." width="25%" backgroundColor="{AccessVars.instance().headerBgColor}" textAlign="center" paddingTop="5" paddingBottom="5"  color="{AccessVars.instance().headerFontColor}" verticalAlign="middle"/>
				<s:Label text="Customer Name" width="50%" backgroundColor="{AccessVars.instance().headerBgColor}" textAlign="center" paddingTop="5" paddingBottom="5"  color="{AccessVars.instance().headerFontColor}" verticalAlign="middle"/>
				<s:Label text="Date" width="25%" backgroundColor="{AccessVars.instance().headerBgColor}" textAlign="center" paddingTop="5" paddingBottom="5" color="{AccessVars.instance().headerFontColor}"/>
			</s:HGroup>
			<s:Group width="100%" height="100%">
				<s:Scroller width="100%" height="100%">
					<s:VGroup id="dgSearch" gap="2" width="100%" height="100%" contentBackgroundAlpha="1" contentBackgroundColor="0x8bc76d" clipAndEnableScrolling="true"/>
				</s:Scroller>
			</s:Group>
			<!--<mx:HRule width="100%"/>
			<s:HGroup width="100%" horizontalAlign="left" paddingLeft="10" paddingBottom="5">
				<s:Label text="Total Quote: "/>
				<s:Label id="totCount" text="0" width="50" textAlign="right" paddingRight="10"/>
			</s:HGroup>-->
		</s:BorderContainer>
	</s:VGroup>
	<s:VGroup id="cont" minHeight="600" width="75%" height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5">
		<s:VGroup id="mainCont" width="100%" height="100%" enabled="false">
			<s:BorderContainer width="100%" cornerRadius="10" borderStyle="inset">
				<s:borderStroke> 
					<mx:SolidColorStroke 
						color="{AccessVars.instance().borderStrokeColor}" 
						weight="2"/> 
				</s:borderStroke> 
				<s:HGroup  width="100%" height="100%" fontSize="16">
					<s:VGroup width="40%" height="100%" paddingBottom="10" paddingTop="10" paddingLeft="15" paddingRight="15">
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="Sold To." width="90" textAlign="right"/>
							<s:ComboBox id="cmbCustomer" width="100%" tabIndex="2" labelField="label" change="cmbCuschangeHandler(event)"/>
						</s:HGroup>
						<s:HGroup  width="100%" verticalAlign="middle">
							<s:Label text="Branch" width="90" textAlign="right"/>
							<s:DropDownList id="cmbBranch" width="100%" labelField="label" change="cmbBranchchangeHandler(event)"/>
						</s:HGroup>
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="Prepared By" width="90" textAlign="right"/>
							<s:TextInput id="txtPrepBy" width="100%" styleName="required" valueCommit="{txtPrepBy.styleName = txtPrepBy.text==''?'required':''}"/>
						</s:HGroup>
					</s:VGroup>
					
					<s:VGroup  width="60%" height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5">
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="Invoice No." width="100" textAlign="right"/>
							<s:TextInput id="txtInvoiceNo" width="100%" styleName="required" valueCommit="{txtInvoiceNo.styleName = txtInvoiceNo.text==''?'required':''}"/>
							<s:Label text="Date" textAlign="center"/>
							<mx:DateField id="dfDate" width="140" showToday="true" change="cmbBranchchangeHandler(event)"/>
						</s:HGroup>
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="Item/Model No." width="100" textAlign="right"/>
							<s:ComboBox id="cmbProd" width="100%" tabIndex="2" labelField="label" change="cmbProdchangeHandler(event)"/>
						</s:HGroup>
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="Quantity" width="100" textAlign="right"/>
							<s:NumericStepper id="txtQty" width="100" value="0" textAlign="right" tabIndex="3" change="txtQtychangeHandler(event)"/>
							<s:Button id="btnAdd" label="Add  Order" tabIndex="4" click="btnAddclickHandler(event)" keyDown="btnAdd_keyUpHandler(event)"/>
							<s:Spacer width="10"/>
							<s:Label text="Net Price"/>
							<mx:Text id="txtSub" width="100%" text="0.00" textAlign="right" />
						</s:HGroup>
						
						<!--<s:HGroup width="100%" horizontalAlign="right" verticalAlign="bottom">
						<s:HGroup verticalAlign="middle" paddingLeft="10">
						<s:Label text="Stock:" backgroundColor="0xFCFCFC" fontWeight="bold"/>
						<mx:Text id="txtStock" text="0" textAlign="right" width="100" fontWeight="bold"/>
						</s:HGroup>
						<s:Spacer width="35%"/>
						<s:HGroup width="50%" fontSize="16" verticalAlign="middle">
						<s:Label text="Net Price:" width="90"/>
						<mx:Text id="txtSub" width="100%" text="0.00" textAlign="right" />
						</s:HGroup>
						</s:HGroup>-->
						
						
						
					</s:VGroup>
				</s:HGroup>
			</s:BorderContainer>
			<s:Spacer height="5"/>
			<s:DataGrid id="dg" width="100%" height="100%" minHeight="200" sortableColumns="false" textAlign="center" fontSize="12" editable="true"
						gridDoubleClick="dg_gridDoubleClickHandler(event)" doubleClickEnabled="true" gridItemEditorSessionSave="dg_gridItemEditorSessionSave(event)"
						gridItemEditorSessionStart="dg_gridItemEditorSessionStartHandler(event)">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn width="20" itemRenderer="com.module.renderer.RemoveItemRenderer" editable="false"/>
						<s:GridColumn width="40" dataField="num" headerText="No." editable="false" headerRenderer="com.module.renderer.GridHeadRenderer"/>
						<s:GridColumn dataField="qty" headerText="Qty" width="40"  editable="true" headerRenderer="com.module.renderer.GridHeadRenderer"/>
						<s:GridColumn dataField="modelNo" headerText="Item / Model No." width="120"  editable="false">
							<s:itemRenderer>
								<fx:Component>
									<s:DefaultGridItemRenderer textAlign="left"/>
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>
						<s:GridColumn dataField="prodDesc" headerText="Description" editable="false" headerRenderer="com.module.renderer.GridHeadRenderer">
							<s:itemRenderer>
								<fx:Component>
									<s:DefaultGridItemRenderer textAlign="left"/>
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>
						<s:GridColumn dataField="price" headerText="Price" width="180"  editable="true" headerRenderer="com.module.renderer.GridHeadRenderer" labelFunction="formatAmtPrice">
							<s:itemRenderer>
								<fx:Component>
									<s:DefaultGridItemRenderer textAlign="right"/>
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>
						<s:GridColumn dataField="total" headerText="Extend" width="180" editable="false" headerRenderer="com.module.renderer.GridHeadRenderer" labelFunction="formatAmtTotal">
							<s:itemRenderer>
								<fx:Component>
									<s:DefaultGridItemRenderer textAlign="right" fontSize="14"/>
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
			<s:HGroup width="100%" verticalAlign="bottom" fontSize="14">
				<s:VGroup width="40%" height="100%">
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label text="Approved By" width="90" textAlign="right"/>
						<s:TextInput id="txtAppBy" width="100%" styleName="required" valueCommit="{txtAppBy.styleName = txtAppBy.text==''?'required':''}"/>
					</s:HGroup>
					<s:Spacer height="100%"/>
					<s:HGroup width="100%" >
						<s:Label text="Number of Items: "/>
						<s:Label id="numItems" text="0"/>
					</s:HGroup>
				</s:VGroup>				
				<s:Spacer width="30%"/>
				<s:VGroup width="30%">
					<s:HGroup width="100%">
						<s:Label text="Subtotal" width="90"/>
						<mx:Text id="txtSubtot" width="100%" text="0.00" textAlign="right"/>
					</s:HGroup>
					<s:HGroup width="100%">
						<s:Label text="VAT" width="90"/>
						<s:TextInput id="txtVat" width="100%" text="0.00" textAlign="right" borderVisible="false" restrict="0-9." focusOut="{updateTotal(false)}" keyUp="txtVat_keyUpHandler(event)"/>
					</s:HGroup>
					<s:HGroup width="100%">
						<s:Label text="TOTAL" fontSize="16"/>
						<s:Label id="txtGT" textAlign="right" text="0.00" fontSize="18" width="100%"/>
					</s:HGroup>
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>		
		<mx:HRule height="5" width="100%"/>
		<s:HGroup id="hgControl" width="100%" height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5"
				  horizontalAlign="left" verticalAlign="top">						
			<s:Button id="btnCheckOut" label="Submit Invoice" click="CheckOutclickHandler(event)" visible="false" includeInLayout="false"/>
			<s:Spacer width="100%"/>
			<s:Button id="btnNew"  label="New Invoice" click="btnNewclickHandler(event)"/>
			<s:Button id="btnEdit"  label="Edit Invoice" click="editClickHandler(event)" visible="false" includeInLayout="false"/>
			<s:Button id="btnView"  label="View Invoice" click="printPrevPO()" visible="false" includeInLayout="false"/>
		</s:HGroup>
	</s:VGroup>
</s:HGroup>
