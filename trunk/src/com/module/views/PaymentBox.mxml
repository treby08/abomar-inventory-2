<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" minWidth="1000" minHeight="550"
		  xmlns:s="library://ns.adobe.com/flex/spark" paddingLeft="10" paddingRight="10" initialize="init()"
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.module.events.DataListEvent;
			import com.module.events.ItemsTransEvent;
			import com.module.events.UserEvent;
			import com.module.renderer.PaymentRenderer;
			import com.variables.AccessVars;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.managers.PopUpManager;
			import mx.printing.FlexPrintJob;
			import mx.printing.FlexPrintJobScaleType;
			
			import spark.components.Application;
			import spark.events.GridEvent;
			import spark.events.GridItemEditorEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			public var _type:int = 0; 
			public var _data:Object;
			private var _fromUpdate:Boolean = false;
			public var theOwner:Object;
			public var _salesNo:String = "000";
			public var isProcess:Boolean = false;
			
			public function set salesNo(val:String):void{
				_salesNo = val;
			}
			public function get salesNo():String{
				return _salesNo;
			}
			
			private function init():void{
				/*var log:ItemsTransEvent = new ItemsTransEvent(ItemsTransEvent.SEARCH_PRODUCT,{searchstr:"",sBox:this})
				CairngormEventDispatcher.getInstance().dispatchEvent(log);*/
				if (AccessVars.instance().customers == null){
					var log3:UserEvent = new UserEvent(UserEvent.GET_CUSTOMER_LIST,{qBox:this})
					CairngormEventDispatcher.getInstance().dispatchEvent(log3);
				}
				
					
				updateDataList();
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				if (isProcess){
					dfDate.enabled = false;
					cmbCustomer.enabled = false;
					txtORNo.editable = false;
					hgAmtPaid.visible = hgAmtPaid.includeInLayout = false;
					bcTrans.visible = bcTrans.includeInLayout = false;
					txtPrepBy.editable = false;
					
					btnNew.visible = btnNew.includeInLayout = false;
					btnCheckOut.visible = btnCheckOut.includeInLayout = false;
					btnEdit.visible = btnEdit.includeInLayout = false;
					btnView.visible = btnView.includeInLayout = true;
				}
				dfDate.selectedDate = new Date(); 
				dg.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,propChange);
			}

			private function propChange(evt:PropertyChangeEvent):void{
				var _totAmt:Number = 0;
				for each(var item:Object in dg.dataProvider as ArrayCollection){
					_totAmt +=Number(item.totalAmt);
				}
				txtTotAmt.text = numFmttr.format(_totAmt);
				var ge:GridEvent = new GridEvent(GridEvent.GRID_CLICK);
				ge.item = dg.selectedItem;
				dg.dispatchEvent(ge);
				
			}
			
			public function updateDataList():void{
				if(AccessVars.instance().customers)
				cmbCustomer.dataProvider = AccessVars.instance().customers;
			}
			
			
			public function setDataProvider(arr:ArrayCollection,type:int):void{
				if (type == 0){
					/* cmbProd.dataProvider = arr;
					cmbProd.labelFunction = mycmbProdLabelFunction; */
				}else if (type == 1){
					/* cmbBranch.dataProvider = arr;
					cmbBranch.labelFunction = mycmbBraLabelFunction;
					cmbBranch.selectedIndex = 0;
					genReqNoCode(); */
				}else if (type == 3){
					dg.dataProvider = arr;	
					var _subTot:Number = 0;	
					/*
					arrObj.pdID = obj.@pdID;
					arrObj.pd_payID = obj.@pd_payID;
					arrObj.pd_invID = obj.@pd_invID;
					arrObj.invID = "";
					arrObj.acctNo = obj.@acctNo;
					arrObj.amt = obj.@pd_amt;
					arrObj.credit = obj.@pd_credit;
					arrObj.totalAmt = obj.@pd_totalAmt;
					arrObj.num = num;
					*/
					for each (var item:Object in arr){						
						_subTot += Number(item.totalAmt);
						
					}
					txtTotAmt.text = numFmttr.format(_subTot);
					
					addPayItem()
					
				}else if (type == 4){
					cmbCustomer.dataProvider = AccessVars.instance().customers = arr;
				}
			}
			
			private var _arrCol:ArrayCollection;
			public function set dataCollection(arrCol:ArrayCollection):void{
				_arrCol = arrCol
				
				if (dgSearch.numElements > 0){
					dgSearch.removeAllElements();
				}
				
				if (arrCol.length > 0){
					var itemUser:PaymentRenderer;
					for each (var obj:Object in arrCol){
						itemUser = new PaymentRenderer()
						itemUser.data = obj;
						itemUser.theBox = this
						dgSearch.addElement(itemUser);
					}
				}
			}
			
			public function setSelectedCustomer(cID:String):void{
				for each (var item:Object in cmbCustomer.dataProvider as ArrayCollection){
					trace(item.custID," == ",cID)
					if (item.custID == cID){
						cmbCustomer.selectedItem = item;
						cmbCustomer.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE));
						break;
					}	
				}
			}
			
			private function mycmbProdLabelFunction(item:Object):String{
				return (item)?item.pCode +" - "+item.modelNo:"";
			}
			private function mycmbBraLabelFunction(item:Object):String{
				return (item)?item.bCode+" - "+item.bLocation:"";
			}
			
			
			
			private function roundDec(numIn:Number, decimalPlaces:int = 2):Number {
				var nExp:int = Math.pow(10,decimalPlaces) ; 
				var nRetVal:Number = Math.round(numIn * nExp) / nExp
				return nRetVal;
			}
			
			private function errorTrap():Boolean{
				if (dg.dataProviderLength == 0){
					Alert.show("Item List is Empty","Submit Payment Error");
					return false;
				}
				if (cmbCustomer.selectedIndex == -1){
					Alert.show("Sold To Field is Empty","Submit Payment Error");
					return false;
				}
				if (txtORNo.text == ""){
					Alert.show("OR No. is Empty","Submit Payment Error");
					return false;
				}
				
				return true;
			}
			
			protected function CheckOutclickHandler(event:MouseEvent):void
			{
				if(errorTrap() == false)
					return;
				/*
				$pay_ORNo = $_REQUEST['pay_ORNo'];
				$pay_custID = $_REQUEST['pay_custID'];
				$preparedBy = $_REQUEST['preparedBy'];
				$dateTrans = $_REQUEST['dateTrans'];
				$totalAmt = $_REQUEST['totalAmt'];
				$checkNo = $_REQUEST['checkNo'];
				$draweeBank = $_REQUEST['draweeBank'];
				$checkAmt = $_REQUEST['checkAmt'];
				$cashAmt = $_REQUEST['cashAmt']; 
				*/
				
				var obj:Object = {}
				obj.pay_ORNo = txtORNo.text;
				obj.pay_custID = cmbCustomer.selectedItem.custID;
				obj.preparedBy = txtPrepBy.text;
				obj.dateTrans = setDateFormat(dfDate.selectedDate);
				obj.totalAmt = txtTotAmt.text.replace(/\b,\b/g,"");
				obj.checkNo = txtCheckNo.text;
				obj.draweeBank = txtDrawBank.text;
				obj.checkAmt = txtCheckAmt.text.replace(/\b,\b/g,"");
				obj.cashAmt = txtCash.text.replace(/\b,\b/g,"");
				
				var strItem:Array = new Array();
				for each (var item:Object in dg.dataProvider){
					trace("item.invID",item.invID);
					if (item.invID != undefined && item.invID != -1 && item.amt != "0.00")
						strItem.push(item.invID+"|"+item.amt+"|"+item.credit+"|"+item.totalAmt+"|"+item.pdID);
				}
				obj.payDetails = strItem.join("||");
				trace("obj.payDetails",obj.payDetails);
				var log2:ItemsTransEvent;
				if (_type==0){
					obj.pBox = this;
					log2 = new ItemsTransEvent(ItemsTransEvent.ADD_PAYMENT,obj)
					CairngormEventDispatcher.getInstance().dispatchEvent(log2);
				}else if (_type==1){
					obj.payID = _data.payID;
					obj.pBox = this;
					_fromUpdate = true;
					log2 = new ItemsTransEvent(ItemsTransEvent.EDIT_PAYMENT,obj)
					CairngormEventDispatcher.getInstance().dispatchEvent(log2);
				}
				
				//printPrevPO()
			}
			
			public function setDateFormat(d:Date):String{
				var strDate:String="";
				var mon:String = (d.month+1)<10?"0"+String(d.month+1):String(d.month+1);
				var dat:String = (d.date)<10?"0"+String(d.date):String(d.date);
				strDate = d.fullYear+"-"+mon+"-"+dat;
				return strDate;
			}
			
			protected function printPrevPO():void
			{
				if(errorTrap() == false)
					return;
				
				var _printBox:PrintPrevBox = new PrintPrevBox();
				_printBox.boxType = this;
				_printBox.orderTypeID = 4;
				_printBox.width = AccessVars.instance().mainApp.width-5;
				_printBox.height = AccessVars.instance().mainApp.height-5;
				PopUpManager.addPopUp(_printBox,this,true);
			}
			
			public function clearFields(event:MouseEvent):void{
				
				if (_fromUpdate){
					_fromUpdate = false;
					
					(theOwner as PaymentRenderer).data = _data;
					(theOwner as PaymentRenderer).creationCompleteHandler(null);
					return;
				}
				txtAddress.text = "";
				txtPrepBy.text = "";
				cmbCustomer.selectedIndex = -1;
				txtORNo.text = "";
				txtTin.text = "";
				txtAmtPaid.text= "0.00";
				txtCheckNo.text = "";
				txtDrawBank.text = "";
				txtCheckAmt.text = "0.00";
				txtCash.text = "0.00";
				txtPayTotal.text = "0.00";
				txtTotAmt.text = "0.00";
				if (dg.dataProvider)
				dg.dataProvider.removeAll();
				dg.dataProvider = null;
				
				
				dfDate.selectedDate = new Date();
			}
						
			protected function SearchClickHandler(event:MouseEvent):void
			{
				var log:ItemsTransEvent = new ItemsTransEvent(ItemsTransEvent.SEARCH_PAYMENT,{searchstr:txtSearchStr.text,condition:"",qBox:this})
				CairngormEventDispatcher.getInstance().dispatchEvent(log);
				btnCheckOut.visible = btnCheckOut.includeInLayout = false;
				btnView.visible = btnView.includeInLayout = false;
				btnEdit.visible = btnEdit.includeInLayout = false;
				mainCont.enabled = false;
			}
			
			protected function btnNewclickHandler(event:MouseEvent):void
			{
				
				if (dg.dataProvider != null){
					Alert.show("Are you sure to create a new Payment?","Payment not empty",Alert.YES|Alert.NO,null,newSalesHandler,null,Alert.NO);
				}else{
					_type = 0;
					mainCont.enabled = true;
					btnCheckOut.label = "Submit Payment";
					btnCheckOut.visible = btnCheckOut.includeInLayout = true;
					btnView.visible = btnView.includeInLayout = false;
					btnEdit.visible = btnEdit.includeInLayout = false;
					clearFields(null);
					/*var log3:ItemsTransEvent = new ItemsTransEvent(ItemsTransEvent.GET_QUOTE_NUMBER,{qBox:this})
					CairngormEventDispatcher.getInstance().dispatchEvent(log3);*/
				}
			}
			
			private function newSalesHandler(event:CloseEvent):void{
				if (event.detail == Alert.YES){
					_type = 0;
					mainCont.enabled = true;
					btnCheckOut.label = "Submit Payment";
					btnCheckOut.visible = btnCheckOut.includeInLayout = true;
					btnView.visible = btnView.includeInLayout = false;
					btnEdit.visible = btnEdit.includeInLayout = false;
					clearFields(null);
				}
			}
			
			protected function editClickHandler(event:MouseEvent):void
			{
				_type = 1;
				btnCheckOut.label = "Save Payment Changes";
				btnCheckOut.visible = btnCheckOut.includeInLayout = true;
				btnEdit.visible = btnEdit.includeInLayout = false;
				btnView.visible = btnView.includeInLayout = true;
				mainCont.enabled = true;
				
				checkIfPrintable()
			}
			
			protected function cmbCuschangeHandler(event:IndexChangeEvent):void
			{
				txtAddress.text = event.target.selectedItem.address;
				txtTin.text = event.target.selectedItem.tin;
				btnAdd.toolTip="";
				btnAdd.enabled=true;
				
				
				txtAmtPaid.text= "0.00";
				txtCheckNo.text = "";
				txtDrawBank.text = "";
				txtCheckAmt.text = "0.00";
				txtCash.text = "0.00";
				txtPayTotal.text = "0.00";
				txtTotAmt.text = "0.00";
				if (dg.dataProvider)
					dg.dataProvider.removeAll();
				dg.dataProvider = null;
				
				//if (AccessVars.instance().invoiceList == null){
				trace("event.target.selectedItem.custID",event.target.selectedItem.custID)
				var log2:DataListEvent = new DataListEvent(DataListEvent.GET_INVOICE_LIST,{pBox:this,custID:event.target.selectedItem.custID})
				CairngormEventDispatcher.getInstance().dispatchEvent(log2);
				//}
				btnView.visible = btnView.includeInLayout = false;
			}
			
			public function addPayItem():void{
				var arrCol:ArrayCollection;
				if (dg.dataProvider)
					arrCol = dg.dataProvider as ArrayCollection;
				else
					arrCol = new ArrayCollection();
				
				var obj:Object = new Object();
				
				if(dg.dataProviderLength == 0 && AccessVars.instance().invoiceList.length > 0){
					
					obj.num = arrCol.length+1;
					obj.invID = -1;
					obj.amt = "0.00";
					obj.credit = "0.00";
					obj.totalAmt = "0.00";
					arrCol.addItem(obj);
					dg.dataProvider = arrCol;
					
				}else if (dg.selectedIndex == dg.dataProviderLength-1 && AccessVars.instance().invoiceList.length > 0){
					
					obj.num = arrCol.length+1;
					obj.invID = -1;
					obj.amt = "0.00";
					obj.credit = "0.00";
					obj.totalAmt = "0.00";
					arrCol.addItem(obj);
					dg.dataProvider = arrCol;
					
				}else if(AccessVars.instance().invoiceList && AccessVars.instance().invoiceList.length > 0){
					if (arrCol.length > 0 && arrCol.getItemAt(dg.dataProviderLength-1).invID != -1){
						obj.num = arrCol.length+1;
						obj.invID = -1;
						obj.amt = "0.00";
						obj.credit = "0.00";
						obj.totalAmt = "0.00";
						arrCol.addItem(obj);
						dg.dataProvider = arrCol;
					}
				}
			}
			
			protected function btnAddclickHandler(event:MouseEvent):void
			{	
				if (dg.dataProvider == null)
					return;
				
				var arrCol:ArrayCollection = dg.dataProvider as ArrayCollection;
				
				if (dg.selectedItem && Number(txtAmtPaid.text) > Number(dg.selectedItem.amt)){
					Alert.show("Value is greater than the Invoice Amount", "Error");
					return;
				}
				
				addPayItem();
				if (!dg.selectedItem)return;
				
				if((dg.selectedItem.acctNo == "" || dg.selectedItem.acctNo == undefined) && dg.selectedItem.credit == "0.00"){
					dg.selectedItem.credit=txtAmtPaid.text;
					dg.selectedItem.totalAmt=txtAmtPaid.text;
					dg.dataProvider.itemUpdated(dg.selectedItem);
				}
				txtAmtPaid.text = "0.00";
				var _totAmt:Number = 0;
				for each (var item:Object in dg.dataProvider){
					if (item.invID != -1)
						_totAmt += Number(item.totalAmt);
				}
				txtTotAmt.text = numFmttr.format(_totAmt);
				
				checkIfPrintable()
			}
			
			private function formatAmt(item:Object, column:GridColumn):String{
				return numFmttr.format(item.amt);
			}
			private function formatAmtTotal(item:Object, column:GridColumn):String{
				return numFmttr.format(item.totalAmt);
			}
			private function formatAmtPrice(item:Object, column:GridColumn):String{
				return numFmttr.format(item.credit);
			}
			
			protected function computefocusOutHandler(event:FocusEvent):void
			{
				event.target.text = numFmttr.format(String(event.target.text).replace(/\b,\b/g,""))
				txtPayTotal.text = numFmttr.format(Number(txtCheckAmt.text.replace(/\b,\b/g,"")) + Number(txtCash.text.replace(/\b,\b/g,"")));
				checkIfPrintable()				
			}
			
			private function checkIfPrintable():void{
				if (txtPayTotal.text != "0.00" && txtPayTotal.text == txtTotAmt.text)
					btnCheckOut.enabled = true;
				else
					btnCheckOut.enabled = false;
				
				if(btnCheckOut.enabled)
					btnView.visible = btnView.includeInLayout = true;
				else
					btnView.visible = btnView.includeInLayout = false;
			}
			
			protected function gridClickHandler(event:GridEvent):void
			{
				if(event.item && event.item.totalAmt == "0.00"){
					txtAmtPaid.text = event.item.amt;
				}
			}
			
			protected function selectAllfocusInHandler(event:FocusEvent):void
			{
				/*trace("event.currentTarget",event.currentTarget)
				return;*/
				if ((event.currentTarget as TextInput).text == "0.00")
					(event.currentTarget as TextInput).selectAll();
			}
			
			protected function dg_keyUpHandler(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.DELETE){
					if (dg.dataProvider.length > 1)
						Alert.show("Are you sure to remove this item?","Confirm",Alert.YES|Alert.NO,null,closeDeleteHandler);
				}
			}
			
			private function closeDeleteHandler(evt:CloseEvent):void{
				if (evt.detail == Alert.YES){
					var arrCol:ArrayCollection = dg.dataProvider as ArrayCollection;
					var selIdx:int = dg.selectedIndex;
					arrCol.removeItemAt(selIdx);
					arrCol.refresh();
					selIdx--;
					dg.dataProvider = arrCol;
					txtAmtPaid.text = "0.00";
					
					if (selIdx < 0){
						selIdx = 0;
						dg.selectedIndex = selIdx;
					}else{
						dg.selectedIndex = selIdx;
						addPayItem();
					}
					
					
					
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:NumberFormatter id="numFmttr" precision="2" useThousandsSeparator="true"  />
	</fx:Declarations>
	<!--<s:Label text="Sales Quote" fontWeight="bold" fontSize="18" fontStyle="italic"/>  minWidth="300" maxWidth="350"-->
	<s:VGroup id="searchProd" width="25%" height="100%" minWidth="300" maxWidth="350" paddingBottom="5" paddingTop="5">
		<s:BorderContainer width="100%" height="100%" cornerRadius="10" borderStyle="inset">
			<s:layout>
				<s:VerticalLayout paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5"/>
			</s:layout>
			<s:borderStroke> 
				<mx:SolidColorStroke 
					color="{AccessVars.instance().borderStrokeColor}" 
					weight="2"/> 
			</s:borderStroke> 
			<s:HGroup width="100%" horizontalAlign="left" verticalAlign="middle" height="30" paddingRight="5">
				<s:Label text="Search: "/>
				<s:TextInput prompt="[OR. No. / Customer]" id="txtSearchStr" enter="SearchClickHandler(null)" width="90%"/>
				<s:Button label="Search" click="SearchClickHandler(event)"/>				
			</s:HGroup>
			<s:HGroup width="100%" fontSize="14" horizontalAlign="center" fontWeight="bold" gap="2">
				<s:Label text="OR No." width="25%" backgroundColor="{AccessVars.instance().headerBgColor}" textAlign="center" paddingTop="5" paddingBottom="5"  color="{AccessVars.instance().headerFontColor}" verticalAlign="middle"/>
				<s:Label text="Sold To" width="50%" backgroundColor="{AccessVars.instance().headerBgColor}" textAlign="center" paddingTop="5" paddingBottom="5"  color="{AccessVars.instance().headerFontColor}" verticalAlign="middle"/>
				<s:Label text="Date" width="25%" backgroundColor="{AccessVars.instance().headerBgColor}" textAlign="center" paddingTop="5" paddingBottom="5" color="{AccessVars.instance().headerFontColor}"/>
			</s:HGroup>
			<s:Group width="100%" height="100%">
				<s:Scroller width="100%" height="100%">
					<s:VGroup id="dgSearch" gap="2" width="100%" height="100%" contentBackgroundAlpha="1" contentBackgroundColor="0x8bc76d" clipAndEnableScrolling="true"/>
				</s:Scroller>
			</s:Group>
		</s:BorderContainer>
	</s:VGroup>
	<s:VGroup id="cont" minHeight="600" width="75%" height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5">
		<s:VGroup id="mainCont" width="100%" height="100%" enabled="false">
			<s:BorderContainer width="100%" cornerRadius="10" borderStyle="inset">
				<s:borderStroke> 
					<mx:SolidColorStroke 
						color="{AccessVars.instance().borderStrokeColor}" 
						weight="2"/> 
				</s:borderStroke> 
				<s:HGroup  width="100%" height="100%" fontSize="16">
					<s:VGroup width="50%" height="100%" paddingBottom="10" paddingTop="10" paddingLeft="15" paddingRight="15">
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="Sold To" width="90" textAlign="right"/>
							<s:ComboBox id="cmbCustomer" width="100%" tabIndex="2" labelField="label" change="cmbCuschangeHandler(event)"/>
						</s:HGroup>
						<s:HGroup width="100%">
							<s:Label text="Address" width="90" textAlign="right"/>
							<s:TextArea id="txtAddress" width="100%" height="90" editable="false"/>							
						</s:HGroup>
					</s:VGroup>
					
					<s:VGroup  width="50%" height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5">
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="OR No." width="100" textAlign="right"/>
							<s:TextInput id="txtORNo" width="100%" styleName="required" valueCommit="{txtORNo.styleName = txtORNo.text==''?'required':''}"/>
							<s:Label text="Date" textAlign="center"/>
							<mx:DateField id="dfDate" width="140" showToday="true"/>
						</s:HGroup>
						<s:HGroup width="100%" verticalAlign="middle">
							<s:Label text="TIN No." width="100" textAlign="right"/>
							<s:TextInput id="txtTin" width="100%" editable="false"/>
						</s:HGroup>
						<s:HGroup id="hgAmtPaid" width="100%" verticalAlign="middle">
							<s:Label text="Amount Paid" width="100" textAlign="right"/>
							<s:TextInput id="txtAmtPaid" width="100%" textAlign="right" text="0.00" restrict="0-9." focusIn="selectAllfocusInHandler(event)"/>
							<s:Button id="btnAdd" label="Add Payment" click="btnAddclickHandler(event)" enabled="false" toolTip="Select Customer First"/>
						</s:HGroup>	
					</s:VGroup>
				</s:HGroup>
			</s:BorderContainer>
			<s:Spacer height="5"/>
			<s:HGroup width="100%" gap="0">
				<s:BorderContainer cornerRadius="3" borderStyle="solid" height="100%" id="bcTrans">
					<s:borderStroke> 
						<mx:SolidColorStroke 
							color="0xCCCCCC" 
							weight="2"/> 
					</s:borderStroke> 
					<s:layout>
						<s:VerticalLayout paddingRight="3" paddingLeft="3" paddingTop="3"/>
					</s:layout>
					<s:HGroup width="100%">
						<s:VGroup width="50%">
							<s:Label text="Check No."/>
							<s:TextInput id="txtCheckNo" width="100%"/>
						</s:VGroup>
						<s:VGroup width="50%">
							<s:Label text="Drawee Bank"/>
							<s:TextInput id="txtDrawBank" width="100%"/>
						</s:VGroup>
					</s:HGroup>
					<s:VGroup width="100%">
						<s:Label text="Check Amount"/>
						<s:TextInput id="txtCheckAmt" width="100%" restrict="0-9." textAlign="right" focusOut="computefocusOutHandler(event)" text="0.00" focusIn="selectAllfocusInHandler(event)"/>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:Label text="Cash"/>
						<s:TextInput id="txtCash" width="100%" restrict="0-9." textAlign="right" focusOut="computefocusOutHandler(event)" text="0.00" focusIn="selectAllfocusInHandler(event)"/>
					</s:VGroup>
					<s:HGroup width="100%" height="100%" verticalAlign="middle">
						<s:Label text="TOTAL" width="50" textAlign="center"/>
						<s:TextInput id="txtPayTotal" width="100%" editable="false" borderVisible="false" textAlign="right"/>
					</s:HGroup>
				</s:BorderContainer>
				<s:DataGrid id="dg" width="100%" height="100%" minHeight="200" sortableColumns="false" textAlign="center" fontSize="12"
							gridClick="gridClickHandler(event)" keyUp="dg_keyUpHandler(event)">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="invID" headerText="Document" width="120" headerRenderer="com.module.renderer.GridHeadRenderer" editable="false" itemRenderer="com.module.renderer.InvoiceListRenderer"/>
							<s:GridColumn dataField="amt" headerText="Amount" width="120" editable="false" headerRenderer="com.module.renderer.GridHeadRenderer" labelFunction="formatAmt">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right"/>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="credit" headerText="Credit" width="120" editable="false" headerRenderer="com.module.renderer.GridHeadRenderer" labelFunction="formatAmtPrice">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right"/>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="totalAmt" headerText="Net Amount" editable="false" headerRenderer="com.module.renderer.GridHeadRenderer" labelFunction="formatAmtTotal">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right"/>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:HGroup>
			
			
			<s:HGroup width="100%" verticalAlign="bottom" fontSize="14">
				<s:HGroup width="40%" verticalAlign="middle">
					<s:Label text="Prepared By" width="90" textAlign="right"/>
					<s:TextInput id="txtPrepBy" width="100%" styleName="required" valueCommit="{txtPrepBy.styleName = txtPrepBy.text==''?'required':''}"/>
				</s:HGroup>
				<s:HGroup width="60%" verticalAlign="middle" horizontalAlign="right">
					<s:Label text="TOTAL AMOUNT" width="120" textAlign="right"/>
					<s:Label id="txtTotAmt" width="50%" textAlign="right" fontSize="14" fontWeight="bold"/>
				</s:HGroup>
			</s:HGroup>
		</s:VGroup>		
		<mx:HRule height="5" width="100%"/>
		<s:HGroup id="hgControl" width="100%" height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5"
				  horizontalAlign="left" verticalAlign="top">						
			<s:Button id="btnCheckOut" label="Submit Payment" click="CheckOutclickHandler(event)" visible="false" includeInLayout="false" enabled="false"/>
			<s:Spacer width="100%"/>
			<s:Button id="btnNew"  label="New Payment" click="btnNewclickHandler(event)"/>
			<s:Button id="btnEdit"  label="Edit Payment" click="editClickHandler(event)" visible="false" includeInLayout="false"/>
			<s:Button id="btnView"  label="View Payment" click="printPrevPO()" visible="false" includeInLayout="false"/>
		</s:HGroup>
	</s:VGroup>
</s:HGroup>
